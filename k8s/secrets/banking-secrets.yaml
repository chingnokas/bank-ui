apiVersion: v1
kind: Secret
metadata:
  name: banking-secrets
  namespace: banking-app
  labels:
    app: banking-app
    component: secrets
    environment: production
type: Opaque
stringData:
  # Database configuration
  postgres-user: "bankuser"
  postgres-password: "BankSecurePass2024!"
  database-url: "postgresql://bankuser:BankSecurePass2024!@postgres:5432/bankdb"
  
  # PostgreSQL exporter DSN for monitoring
  postgres-exporter-dsn: "postgresql://bankuser:BankSecurePass2024!@localhost:5432/bankdb?sslmode=disable"
  
  # Application secrets
  secret-key: "a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6"
  jwt-secret: "banking-jwt-secret-key-2024-production"
  
  # External service credentials (if needed)
  # redis-url: "redis://redis:6379/0"
  # smtp-password: "smtp-password-here"
  
  # API keys for external services
  # external-api-key: "your-external-api-key"
---
apiVersion: v1
kind: Secret
metadata:
  name: registry-credentials
  namespace: banking-app
  labels:
    app: banking-app
    component: registry
    environment: production
type: kubernetes.io/dockerconfigjson
data:
  .dockerconfigjson: eyJhdXRocyI6eyJnaGNyLmlvIjp7InVzZXJuYW1lIjoieW91ci11c2VybmFtZSIsInBhc3N3b3JkIjoieW91ci10b2tlbiIsImF1dGgiOiJlVzkxY2kxMWMyVnlibUZ0WlRwNWIzVnlMWFJ2YTJWdSJ9fX0=
---
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificates
  namespace: banking-app
  labels:
    app: banking-app
    component: tls
    environment: production
type: kubernetes.io/tls
data:
  # Add your TLS certificate and key here (base64 encoded)
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0t...
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0t...
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: banking-config
  namespace: banking-app
  labels:
    app: banking-app
    component: config
    environment: production
data:
  # Application configuration
  APP_NAME: "Peoples Bank API"
  APP_VERSION: "1.0.0"
  ENVIRONMENT: "production"
  DEBUG: "false"
  LOG_LEVEL: "INFO"
  
  # CORS configuration
  ALLOWED_ORIGINS: "https://banking-frontend,https://banking-app.com,https://www.banking-app.com"
  
  # Database configuration
  DB_POOL_SIZE: "20"
  DB_MAX_OVERFLOW: "30"
  DB_POOL_TIMEOUT: "30"
  DB_POOL_RECYCLE: "3600"
  
  # Security configuration
  SESSION_TIMEOUT: "3600"
  TOKEN_EXPIRY: "86400"
  MAX_LOGIN_ATTEMPTS: "5"
  LOCKOUT_DURATION: "900"
  
  # Rate limiting
  RATE_LIMIT_PER_MINUTE: "100"
  RATE_LIMIT_BURST: "200"
  
  # Monitoring configuration
  METRICS_ENABLED: "true"
  HEALTH_CHECK_INTERVAL: "30"
  
  # Feature flags
  ENABLE_REGISTRATION: "false"
  ENABLE_PASSWORD_RESET: "true"
  ENABLE_TWO_FACTOR_AUTH: "true"
  ENABLE_AUDIT_LOGGING: "true"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: banking-app
  labels:
    app: banking-frontend
    component: config
    environment: production
data:
  nginx.conf: |
    # Run nginx in foreground and use /tmp for PID file
    pid /tmp/nginx.pid;

    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }

    http {
        include       /etc/nginx/mime.types;
        default_type  application/octet-stream;

        # Logging
        log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                       '$status $body_bytes_sent "$http_referer" '
                       '"$http_user_agent" "$http_x_forwarded_for"';

        access_log /var/log/nginx/access.log main;
        error_log /var/log/nginx/error.log warn;

        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        types_hash_max_size 2048;
        client_max_body_size 10M;

        # Gzip compression
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_proxied any;
        gzip_comp_level 6;
        gzip_types
            application/atom+xml
            application/javascript
            application/json
            application/ld+json
            application/manifest+json
            application/rss+xml
            application/vnd.geo+json
            application/vnd.ms-fontobject
            application/x-font-ttf
            application/x-web-app-manifest+json
            application/xhtml+xml
            application/xml
            font/opentype
            image/bmp
            image/svg+xml
            image/x-icon
            text/cache-manifest
            text/css
            text/plain
            text/vcard
            text/vnd.rim.location.xloc
            text/vtt
            text/x-component
            text/x-cross-domain-policy;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header X-XSS-Protection "1; mode=block" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:; connect-src 'self' http://banking-backend:8000;" always;

        server {
            listen 8080;
            server_name localhost;
            root /usr/share/nginx/html;
            index index.html index.htm;

            # Security headers for this server block
            add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

            # Main location for React app
            location / {
                try_files $uri $uri/ /index.html;
                expires 1h;
                add_header Cache-Control "public, immutable";
            }

            # API proxy to backend
            location /api/ {
                proxy_pass http://banking-backend:8000/api/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_connect_timeout 30s;
                proxy_send_timeout 30s;
                proxy_read_timeout 30s;
            }

            # Health check endpoint
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }

            # Static assets with long cache
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
                access_log off;
            }

            # Deny access to hidden files
            location ~ /\. {
                deny all;
                access_log off;
                log_not_found off;
            }

            # Error pages
            error_page 404 /index.html;
            error_page 500 502 503 504 /50x.html;
            location = /50x.html {
                root /usr/share/nginx/html;
            }
        }
    }
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: banking-app-deployer
  namespace: banking-app
  labels:
    app: banking-app
    component: deployment
    environment: production
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: banking-app
  name: banking-app-deployer
  labels:
    app: banking-app
    component: deployment
    environment: production
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "statefulsets", "daemonsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["autoscaling"]
  resources: ["horizontalpodautoscalers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["policy"]
  resources: ["poddisruptionbudgets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: banking-app-deployer
  namespace: banking-app
  labels:
    app: banking-app
    component: deployment
    environment: production
subjects:
- kind: ServiceAccount
  name: banking-app-deployer
  namespace: banking-app
roleRef:
  kind: Role
  name: banking-app-deployer
  apiGroup: rbac.authorization.k8s.io

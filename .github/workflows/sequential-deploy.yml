name: Sequential Banking App Deployment

on:
  workflow_dispatch:  # Manual trigger only
  push:
    branches: [sequential-deploy]

jobs:
  # STEP 1: Validate prerequisites - MUST succeed for anything else to run
  validate-prerequisites:
    runs-on: ubuntu-latest
    outputs:
      ready: ${{ steps.validate.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate DigitalOcean Token
        id: validate
        run: |
          echo "🔍 Validating prerequisites..."
          
          if [ -z "${{ secrets.DIGITALOCEAN_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_TOKEN secret is missing"
            echo ""
            echo "🛠️ REQUIRED ACTION:"
            echo "1. Go to: https://cloud.digitalocean.com/account/api/tokens"
            echo "2. Create token with read/write permissions"
            echo "3. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "4. Add secret: DIGITALOCEAN_TOKEN = your_token"
            echo ""
            echo "❌ STOPPING: Cannot proceed without DigitalOcean token"
            exit 1
          fi
          
          echo "✅ DigitalOcean token is configured"
          echo "ready=true" >> $GITHUB_OUTPUT

  # STEP 2: Create/verify cluster - MUST succeed for apps to deploy
  ensure-cluster:
    runs-on: ubuntu-latest
    needs: validate-prerequisites
    if: needs.validate-prerequisites.outputs.ready == 'true'
    outputs:
      cluster-ready: ${{ steps.cluster.outputs.ready }}
      cluster-endpoint: ${{ steps.cluster.outputs.endpoint }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Check Existing Cluster
        id: check
        run: |
          echo "🔍 Checking for existing cluster..."
          
          if doctl kubernetes cluster get banking-app-k8s &> /dev/null; then
            STATUS=$(doctl kubernetes cluster get banking-app-k8s --format Status --no-header)
            echo "✅ Found existing cluster with status: $STATUS"
            
            if [ "$STATUS" = "running" ]; then
              echo "✅ Cluster is already running"
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "needs-creation=false" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Cluster exists but not running (status: $STATUS)"
              echo "exists=true" >> $GITHUB_OUTPUT
              echo "needs-creation=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "❌ No cluster found - will create new one"
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "needs-creation=true" >> $GITHUB_OUTPUT
          fi

      - name: Create Cluster
        if: steps.check.outputs.needs-creation == 'true'
        working-directory: ./infra
        run: |
          echo "🏗️ Creating new Kubernetes cluster..."
          
          # Use simple configuration
          cp simple.tf main.tf
          
          echo "Initializing OpenTofu..."
          tofu init
          
          echo "Planning infrastructure..."
          tofu plan -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
                    -var="cluster_name=banking-app-k8s" \
                    -var="region=nyc1" \
                    -var="node_count=2" \
                    -out=tfplan
          
          echo "Creating infrastructure (this takes 5-8 minutes)..."
          tofu apply -auto-approve tfplan
          
          echo "✅ Infrastructure creation completed"

      - name: Verify Cluster is Running
        id: cluster
        run: |
          echo "🔍 Verifying cluster is running..."
          
          # Wait for cluster to be in running state
          for i in {1..30}; do
            STATUS=$(doctl kubernetes cluster get banking-app-k8s --format Status --no-header 2>/dev/null || echo "not-found")
            echo "Attempt $i/30: Cluster status = $STATUS"
            
            if [ "$STATUS" = "running" ]; then
              echo "✅ Cluster is running!"
              break
            elif [ "$STATUS" = "not-found" ]; then
              echo "❌ Cluster not found"
              if [ $i -eq 30 ]; then
                echo "❌ FAILED: Cluster was not created successfully"
                exit 1
              fi
            else
              echo "⏳ Cluster status: $STATUS (waiting...)"
              if [ $i -eq 30 ]; then
                echo "❌ FAILED: Cluster did not reach running state in time"
                exit 1
              fi
            fi
            
            sleep 30
          done
          
          # Get cluster credentials and verify access
          echo "🔧 Getting cluster credentials..."
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          
          # Wait for nodes to be ready
          echo "⏳ Waiting for cluster nodes to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=600s
          
          # Verify cluster access
          echo "🔍 Verifying cluster access..."
          kubectl cluster-info
          kubectl get nodes
          
          # Get cluster endpoint
          ENDPOINT=$(kubectl config view --minify -o jsonpath='{.clusters[0].cluster.server}')
          echo "endpoint=$ENDPOINT" >> $GITHUB_OUTPUT
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ CLUSTER IS READY FOR APPLICATION DEPLOYMENT"

  # STEP 3: Deploy base infrastructure - ONLY runs if cluster is ready
  deploy-base:
    runs-on: ubuntu-latest
    needs: ensure-cluster
    if: needs.ensure-cluster.outputs.cluster-ready == 'true'
    outputs:
      base-ready: ${{ steps.base.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Setup Kubernetes Access
        run: |
          echo "🔧 Setting up Kubernetes access..."
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl cluster-info

      - name: Deploy Base Infrastructure
        id: base
        run: |
          echo "📁 Deploying base infrastructure..."
          
          # Create namespaces
          echo "Creating namespaces..."
          kubectl apply -f k8s/namespace.yaml
          
          # Deploy secrets
          echo "Deploying secrets..."
          kubectl apply -f k8s/secrets/banking-secrets.yaml
          
          # Deploy database
          echo "🗄️ Deploying PostgreSQL database..."
          kubectl apply -f k8s/database/postgres.yaml
          
          # Wait for database to be ready
          echo "⏳ Waiting for database to be ready..."
          kubectl rollout status statefulset/postgres -n banking-app --timeout=300s
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ BASE INFRASTRUCTURE IS READY"

  # STEP 4: Build and deploy applications - ONLY runs if base is ready
  deploy-applications:
    runs-on: ubuntu-latest
    needs: [ensure-cluster, deploy-base]
    if: needs.deploy-base.outputs.base-ready == 'true'
    outputs:
      apps-ready: ${{ steps.apps.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Setup Kubernetes Access
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl cluster-info

      - name: Build and Push Images
        run: |
          echo "🐳 Building and pushing Docker images..."
          
          # Set up Docker Buildx
          docker buildx create --use
          
          # Login to GitHub Container Registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Build and push frontend
          echo "Building frontend..."
          docker buildx build --platform linux/amd64 \
            -t ghcr.io/chingnokas/cg-bank:latest \
            --push frontend/
          
          # Build and push backend
          echo "Building backend..."
          docker buildx build --platform linux/amd64 \
            -t ghcr.io/chingnokas/cg-backbank:latest \
            --push backend/
          
          echo "✅ Images built and pushed"

      - name: Create Registry Secret
        run: |
          echo "🔐 Creating registry secret..."
          kubectl create secret docker-registry registry-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=banking-app \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Applications
        id: apps
        run: |
          echo "🚀 Deploying applications..."
          
          # Deploy backend
          echo "Deploying backend..."
          kubectl apply -f k8s/backend/
          kubectl rollout status deployment/banking-backend -n banking-app --timeout=300s
          
          # Deploy frontend
          echo "Deploying frontend..."
          kubectl apply -f k8s/frontend/
          kubectl rollout status deployment/banking-frontend -n banking-app --timeout=300s
          
          echo "ready=true" >> $GITHUB_OUTPUT
          echo "✅ APPLICATIONS ARE READY"

  # STEP 5: Deploy monitoring - ONLY runs if apps are ready
  deploy-monitoring:
    runs-on: ubuntu-latest
    needs: [ensure-cluster, deploy-applications]
    if: needs.deploy-applications.outputs.apps-ready == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Setup Kubernetes Access
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl cluster-info

      - name: Deploy Monitoring
        continue-on-error: true
        run: |
          echo "📊 Deploying monitoring stack..."
          
          # Deploy Prometheus
          kubectl apply -f k8s/monitoring/prometheus/
          kubectl rollout status deployment/prometheus-server -n monitoring --timeout=300s
          
          # Deploy Grafana
          kubectl apply -f k8s/monitoring/grafana/
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          
          echo "✅ MONITORING DEPLOYED"

  # STEP 6: Final verification and URLs - ONLY runs if everything succeeded
  final-verification:
    runs-on: ubuntu-latest
    needs: [ensure-cluster, deploy-applications, deploy-monitoring]
    if: always() && needs.deploy-applications.outputs.apps-ready == 'true'
    steps:
      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Setup Kubernetes Access
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s

      - name: Get Service URLs
        run: |
          echo "⏳ Waiting for load balancers..."
          sleep 60
          
          echo ""
          echo "🎉 BANKING APPLICATION DEPLOYMENT COMPLETE!"
          echo "============================================="
          echo ""
          
          # Get service IPs
          FRONTEND_IP=$(kubectl get svc banking-frontend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get svc banking-backend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          PROMETHEUS_IP=$(kubectl get svc prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "🌐 Your Banking Application:"
          echo "Frontend:   http://$FRONTEND_IP/"
          echo "Backend:    http://$BACKEND_IP:8000/"
          echo ""
          echo "📊 Monitoring Dashboard:"
          echo "Grafana:    http://$GRAFANA_IP:3000/ (admin/BankingGrafana2024!)"
          echo "Prometheus: http://$PROMETHEUS_IP:9090/"
          echo ""
          echo "🎯 SUCCESS! Your enterprise banking application is now live!"
          echo ""
          echo "💡 To manage cluster locally:"
          echo "doctl kubernetes cluster kubeconfig save banking-app-k8s"

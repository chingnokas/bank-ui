name: Simple Banking App Deployment

on:
  workflow_dispatch:  # Manual trigger only
  push:
    branches: [simple-deploy]

jobs:
  # Step 1: Create infrastructure
  create-infrastructure:
    runs-on: ubuntu-latest
    outputs:
      cluster-ready: ${{ steps.verify.outputs.ready }}
    steps:
      - uses: actions/checkout@v4

      - name: Validate DigitalOcean Token
        run: |
          if [ -z "${{ secrets.DIGITALOCEAN_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_TOKEN secret is missing"
            echo "Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          echo "✅ DigitalOcean token is configured"

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Create Kubernetes Cluster
        working-directory: ./infra
        run: |
          # Use simple configuration
          cp simple.tf main.tf
          
          echo "🏗️ Initializing OpenTofu..."
          tofu init
          
          echo "📋 Planning infrastructure..."
          tofu plan -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
                    -var="cluster_name=banking-app-k8s" \
                    -var="region=nyc1" \
                    -var="node_count=2" \
                    -out=tfplan
          
          echo "🚀 Creating infrastructure..."
          tofu apply -auto-approve tfplan
          
          echo "✅ Infrastructure created successfully"

      - name: Verify Cluster
        id: verify
        run: |
          echo "⏳ Getting cluster credentials..."
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          
          echo "⏳ Waiting for cluster to be ready..."
          kubectl wait --for=condition=Ready nodes --all --timeout=600s
          
          echo "🔍 Verifying cluster..."
          kubectl cluster-info
          kubectl get nodes
          
          echo "✅ Cluster is ready!"
          echo "ready=true" >> $GITHUB_OUTPUT

  # Step 2: Deploy basic application
  deploy-basic-app:
    runs-on: ubuntu-latest
    needs: create-infrastructure
    if: needs.create-infrastructure.outputs.cluster-ready == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl cluster-info

      - name: Create Namespaces
        run: |
          echo "📁 Creating namespaces..."
          kubectl apply -f k8s/namespace.yaml
          echo "✅ Namespaces created"

      - name: Deploy Secrets
        run: |
          echo "🔐 Deploying secrets..."
          kubectl apply -f k8s/secrets/banking-secrets.yaml
          echo "✅ Secrets deployed"

      - name: Deploy Database
        run: |
          echo "🗄️ Deploying PostgreSQL database..."
          kubectl apply -f k8s/database/postgres.yaml
          
          echo "⏳ Waiting for database to be ready..."
          kubectl rollout status statefulset/postgres -n banking-app --timeout=300s
          echo "✅ Database is ready"

      - name: Get Cluster Info
        run: |
          echo "🎉 Basic Deployment Complete!"
          echo "=============================="
          echo ""
          echo "📊 Cluster Status:"
          kubectl get nodes
          echo ""
          echo "📦 Deployed Resources:"
          kubectl get all -n banking-app
          echo ""
          echo "🔗 Next Steps:"
          echo "1. Build and push Docker images"
          echo "2. Deploy frontend and backend applications"
          echo "3. Set up monitoring stack"
          echo ""
          echo "💡 To access cluster locally:"
          echo "doctl kubernetes cluster kubeconfig save banking-app-k8s"

  # Step 3: Build and deploy applications (if successful)
  deploy-applications:
    runs-on: ubuntu-latest
    needs: deploy-basic-app
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl cluster-info

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: frontend
          file: frontend/Dockerfile
          push: true
          tags: ghcr.io/chingnokas/cg-bank:latest
          platforms: linux/amd64

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: backend
          file: backend/Dockerfile
          push: true
          tags: ghcr.io/chingnokas/cg-backbank:latest
          platforms: linux/amd64

      - name: Create Registry Secret
        run: |
          kubectl create secret docker-registry registry-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=banking-app \
            --dry-run=client -o yaml | kubectl apply -f -

      - name: Deploy Backend
        run: |
          echo "🔧 Deploying backend..."
          kubectl apply -f k8s/backend/deployment.yaml
          kubectl rollout status deployment/banking-backend -n banking-app --timeout=300s
          echo "✅ Backend deployed"

      - name: Deploy Frontend
        run: |
          echo "🌐 Deploying frontend..."
          kubectl apply -f k8s/frontend/deployment.yaml
          kubectl rollout status deployment/banking-frontend -n banking-app --timeout=300s
          echo "✅ Frontend deployed"

      - name: Get Application URLs
        run: |
          echo "🎉 Application Deployment Complete!"
          echo "===================================="
          echo ""
          echo "⏳ Waiting for load balancers..."
          sleep 60
          
          echo "🌐 Service URLs:"
          FRONTEND_IP=$(kubectl get svc banking-frontend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get svc banking-backend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Frontend: http://$FRONTEND_IP/"
          echo "Backend:  http://$BACKEND_IP:8000/"
          echo ""
          echo "📊 Application Status:"
          kubectl get all -n banking-app
          echo ""
          echo "🎯 Success! Your banking application is now running on DigitalOcean Kubernetes!"

  # Step 4: Deploy monitoring (optional)
  deploy-monitoring:
    runs-on: ubuntu-latest
    needs: deploy-applications
    if: success()
    steps:
      - uses: actions/checkout@v4

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Configure kubectl
        run: |
          doctl kubernetes cluster kubeconfig save banking-app-k8s

      - name: Deploy Prometheus
        run: |
          echo "📊 Deploying Prometheus..."
          kubectl apply -f k8s/monitoring/prometheus/
          kubectl rollout status deployment/prometheus-server -n monitoring --timeout=300s
          echo "✅ Prometheus deployed"

      - name: Deploy Grafana
        run: |
          echo "📈 Deploying Grafana..."
          kubectl apply -f k8s/monitoring/grafana/
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          echo "✅ Grafana deployed"

      - name: Get Monitoring URLs
        run: |
          echo "📊 Monitoring Stack Deployed!"
          echo "============================="
          echo ""
          sleep 30
          GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          PROMETHEUS_IP=$(kubectl get svc prometheus-server -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo "Grafana:    http://$GRAFANA_IP:3000/ (admin/BankingGrafana2024!)"
          echo "Prometheus: http://$PROMETHEUS_IP:9090/"
          echo ""
          echo "🎉 Complete banking application with monitoring is now live!"

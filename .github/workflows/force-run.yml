name: Force Run - Deploy Banking App

on:
  workflow_dispatch:
  push:
  pull_request:

jobs:
  deploy-banking-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check Prerequisites
        run: |
          echo "🔍 Checking prerequisites..."
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref }}"
          echo "Actor: ${{ github.actor }}"
          
          if [ -z "${{ secrets.DIGITALOCEAN_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_TOKEN secret is missing"
            echo ""
            echo "🛠️ REQUIRED ACTION:"
            echo "1. Go to: https://cloud.digitalocean.com/account/api/tokens"
            echo "2. Create token with read/write permissions"
            echo "3. Go to: https://github.com/${{ github.repository }}/settings/secrets/actions"
            echo "4. Add secret: DIGITALOCEAN_TOKEN = your_token"
            echo ""
            exit 1
          fi
          
          echo "✅ DigitalOcean token is configured"

      - name: Setup Tools
        run: |
          echo "🔧 Setting up tools..."
          echo "✅ GitHub Actions runner ready"

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Test DigitalOcean Connection
        run: |
          echo "🌊 Testing DigitalOcean connection..."
          doctl account get
          echo "✅ DigitalOcean API is working"

      - name: Check Existing Infrastructure
        run: |
          echo "🔍 Checking existing infrastructure..."
          
          if doctl kubernetes cluster get banking-app-k8s &> /dev/null; then
            STATUS=$(doctl kubernetes cluster get banking-app-k8s --format Status --no-header)
            echo "✅ Found existing cluster with status: $STATUS"
            
            if [ "$STATUS" = "running" ]; then
              echo "✅ Cluster is running - will use existing cluster"
              echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
              echo "CLUSTER_READY=true" >> $GITHUB_ENV
            else
              echo "⚠️ Cluster exists but not running - will recreate"
              echo "CLUSTER_EXISTS=true" >> $GITHUB_ENV
              echo "CLUSTER_READY=false" >> $GITHUB_ENV
            fi
          else
            echo "❌ No cluster found - will create new one"
            echo "CLUSTER_EXISTS=false" >> $GITHUB_ENV
            echo "CLUSTER_READY=false" >> $GITHUB_ENV
          fi

      - name: Create Infrastructure
        if: env.CLUSTER_READY != 'true'
        working-directory: ./infra
        run: |
          echo "🏗️ Creating infrastructure..."
          
          # Use simple configuration
          cp simple.tf main.tf
          
          echo "Initializing OpenTofu..."
          tofu init
          
          echo "Planning infrastructure..."
          tofu plan -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
                    -var="cluster_name=banking-app-k8s" \
                    -var="region=nyc1" \
                    -var="node_count=2" \
                    -out=tfplan
          
          echo "Creating infrastructure..."
          tofu apply -auto-approve tfplan
          
          echo "✅ Infrastructure created"

      - name: Verify Cluster Access
        run: |
          echo "🔧 Setting up cluster access..."
          
          # Get cluster credentials
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          
          # Wait for nodes to be ready
          echo "⏳ Waiting for cluster nodes..."
          kubectl wait --for=condition=Ready nodes --all --timeout=600s
          
          # Verify access
          kubectl cluster-info
          kubectl get nodes
          
          echo "✅ Cluster access verified"

      - name: Deploy Base Infrastructure
        run: |
          echo "📁 Deploying base infrastructure..."
          
          # Create namespaces
          kubectl apply -f k8s/namespace.yaml
          
          # Deploy secrets
          kubectl apply -f k8s/secrets/banking-secrets.yaml
          
          # Deploy database
          kubectl apply -f k8s/database/postgres.yaml
          kubectl rollout status statefulset/postgres -n banking-app --timeout=300s
          
          echo "✅ Base infrastructure deployed"

      - name: Build and Deploy Applications
        run: |
          echo "🚀 Building and deploying applications..."
          
          # Set up Docker Buildx
          docker buildx create --use
          
          # Login to registry
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # Build and push images
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-bank:latest --push frontend/
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-backbank:latest --push backend/
          
          # Create registry secret
          kubectl create secret docker-registry registry-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=banking-app \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy applications
          kubectl apply -f k8s/backend/
          kubectl apply -f k8s/frontend/
          
          # Wait for deployments
          kubectl rollout status deployment/banking-backend -n banking-app --timeout=300s
          kubectl rollout status deployment/banking-frontend -n banking-app --timeout=300s
          
          echo "✅ Applications deployed"

      - name: Deploy Monitoring
        continue-on-error: true
        run: |
          echo "📊 Deploying monitoring..."
          kubectl apply -f k8s/monitoring/prometheus/
          kubectl apply -f k8s/monitoring/grafana/
          kubectl rollout status deployment/prometheus-server -n monitoring --timeout=300s
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          echo "✅ Monitoring deployed"

      - name: Get Service URLs
        run: |
          echo "⏳ Getting service URLs..."
          sleep 60
          
          FRONTEND_IP=$(kubectl get svc banking-frontend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get svc banking-backend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo ""
          echo "🎉 BANKING APPLICATION DEPLOYED!"
          echo "================================"
          echo ""
          echo "🌐 Your Banking App:"
          echo "Frontend: http://$FRONTEND_IP/"
          echo "Backend:  http://$BACKEND_IP:8000/"
          echo ""
          echo "📊 Monitoring:"
          echo "Grafana: http://$GRAFANA_IP:3000/ (admin/BankingGrafana2024!)"
          echo ""
          echo "🎯 SUCCESS! Your banking application is live!"

name: Deploy Now - Banking App

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Token
        run: |
          if [ -z "${{ secrets.DIGITALOCEAN_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_TOKEN missing"
            exit 1
          fi
          echo "✅ Token configured"

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Setup DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Test Connection
        run: |
          echo "🌊 Testing connection..."
          doctl account get
          echo "✅ Connected to DigitalOcean"

      - name: Create Cluster
        working-directory: ./infra
        run: |
          echo "🏗️ Creating cluster..."
          
          # Initialize
          tofu init
          
          # Plan
          tofu plan \
            -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}" \
            -var="cluster_name=banking-app-k8s" \
            -var="region=nyc1" \
            -var="node_count=2" \
            -out=tfplan
          
          # Apply
          tofu apply -auto-approve tfplan
          
          echo "✅ Cluster created"

      - name: Setup Kubectl
        run: |
          echo "🔧 Setting up kubectl..."
          
          # Wait for cluster
          sleep 60
          
          # Get credentials
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          
          # Wait for nodes
          kubectl wait --for=condition=Ready nodes --all --timeout=600s
          
          # Verify
          kubectl get nodes
          echo "✅ Kubectl ready"

      - name: Deploy Apps
        run: |
          echo "🚀 Deploying apps..."
          
          # Base infrastructure
          kubectl apply -f k8s/namespace.yaml

          # Clean up old PostgreSQL resources
          echo "🧹 Cleaning up old PostgreSQL resources..."
          kubectl delete statefulset postgres -n banking-app --ignore-not-found=true
          kubectl delete configmap postgres-config postgres-init -n banking-app --ignore-not-found=true
          kubectl delete pvc -l app=postgres -n banking-app --ignore-not-found=true

          # Wait for cleanup
          sleep 30

          # Deploy new simplified PostgreSQL
          echo "🗄️ Deploying simplified PostgreSQL..."
          kubectl apply -f k8s/database/postgres-simple.yaml

          # Wait for PostgreSQL to be ready (increased timeout)
          echo "⏳ Waiting for PostgreSQL to be ready..."
          kubectl rollout status statefulset/postgres -n banking-app --timeout=600s

          # Verify PostgreSQL is working
          kubectl wait --for=condition=ready pod -l app=postgres -n banking-app --timeout=300s
          echo "✅ PostgreSQL is ready"
          
          # Build images
          docker buildx create --use
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-bank:latest --push frontend/
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-backbank:latest --push backend/
          
          # Registry secret for pulling images
          kubectl create secret docker-registry registry-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=banking-app \
            --dry-run=client -o yaml | kubectl apply -f - || true
          
          # Deploy apps
          kubectl apply -f k8s/backend/
          kubectl apply -f k8s/frontend/
          kubectl rollout status deployment/banking-backend -n banking-app --timeout=300s
          kubectl rollout status deployment/banking-frontend -n banking-app --timeout=300s
          
          echo "✅ Apps deployed"

      - name: Deploy Monitoring
        continue-on-error: true
        run: |
          echo "📊 Deploying monitoring..."
          kubectl apply -f k8s/monitoring/prometheus/
          kubectl apply -f k8s/monitoring/grafana/
          kubectl rollout status deployment/prometheus-server -n monitoring --timeout=300s
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          echo "✅ Monitoring deployed"

      - name: Get URLs
        run: |
          echo "⏳ Getting URLs..."
          sleep 60
          
          FRONTEND_IP=$(kubectl get svc banking-frontend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get svc banking-backend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo ""
          echo "🎉 BANKING APP DEPLOYED!"
          echo "======================="
          echo ""
          echo "🌐 Your Banking App:"
          echo "Frontend: http://$FRONTEND_IP/"
          echo "Backend:  http://$BACKEND_IP:8000/"
          echo ""
          echo "📊 Monitoring:"
          echo "Grafana: http://$GRAFANA_IP:3000/ (admin/BankingGrafana2024!)"
          echo ""
          echo "🎯 SUCCESS!"

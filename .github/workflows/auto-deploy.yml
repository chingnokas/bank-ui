name: Auto Deploy Banking App

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  deploy-banking-app:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Check Prerequisites
        run: |
          echo "🔍 Checking prerequisites..."
          
          if [ -z "${{ secrets.DIGITALOCEAN_TOKEN }}" ]; then
            echo "❌ DIGITALOCEAN_TOKEN secret is missing"
            echo "Add it at: https://github.com/${{ github.repository }}/settings/secrets/actions"
            exit 1
          fi
          
          echo "✅ DigitalOcean token configured"

      - name: Setup OpenTofu
        uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: 1.6.0

      - name: Configure DigitalOcean CLI
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_TOKEN }}

      - name: Test DigitalOcean Connection
        run: |
          echo "🌊 Testing DigitalOcean connection..."
          doctl account get
          echo "✅ Connection successful"

      - name: Check/Create Infrastructure
        working-directory: ./infra
        run: |
          echo "🔍 Checking infrastructure..."
          
          if doctl kubernetes cluster get banking-app-k8s &> /dev/null; then
            STATUS=$(doctl kubernetes cluster get banking-app-k8s --format Status --no-header)
            echo "✅ Found cluster with status: $STATUS"
            
            if [ "$STATUS" != "running" ]; then
              echo "⚠️ Cluster not running, will wait..."
            fi
          else
            echo "❌ No cluster found, creating..."
            
            # Create inline configuration to avoid file conflicts
            cat > deploy.tf << 'EOF'
          variable "do_token" {
            description = "DigitalOcean API Token"
            type        = string
            sensitive   = true
          }

          terraform {
            required_version = ">= 1.0"
            required_providers {
              digitalocean = {
                source  = "digitalocean/digitalocean"
                version = "~> 2.34"
              }
            }
          }

          provider "digitalocean" {
            token = var.do_token
          }

          data "digitalocean_kubernetes_versions" "available" {
            version_prefix = "1.28."
          }

          resource "digitalocean_kubernetes_cluster" "banking_cluster" {
            name    = "banking-app-k8s"
            region  = "nyc1"
            version = data.digitalocean_kubernetes_versions.available.latest_version

            node_pool {
              name       = "banking-app-k8s-worker-pool"
              size       = "s-2vcpu-4gb"
              node_count = 2
              auto_scale = true
              min_nodes  = 1
              max_nodes  = 5
            }

            maintenance_policy {
              start_time = "04:00"
              day        = "sunday"
            }

            auto_upgrade = true
            surge_upgrade = true
          }
          EOF
            
            echo "Initializing OpenTofu..."
            tofu init
            
            echo "Creating infrastructure..."
            tofu apply -auto-approve -var="do_token=${{ secrets.DIGITALOCEAN_TOKEN }}"
            
            echo "✅ Infrastructure created"
          fi

      - name: Setup Cluster Access
        run: |
          echo "🔧 Setting up cluster access..."
          
          # Wait for cluster to be ready
          for i in {1..20}; do
            STATUS=$(doctl kubernetes cluster get banking-app-k8s --format Status --no-header 2>/dev/null || echo "not-found")
            if [ "$STATUS" = "running" ]; then
              echo "✅ Cluster is running"
              break
            else
              echo "⏳ Waiting for cluster... (attempt $i/20, status: $STATUS)"
              sleep 30
            fi
          done
          
          # Get credentials and verify
          doctl kubernetes cluster kubeconfig save banking-app-k8s
          kubectl wait --for=condition=Ready nodes --all --timeout=600s
          kubectl cluster-info
          kubectl get nodes
          
          echo "✅ Cluster access ready"

      - name: Deploy Applications
        run: |
          echo "🚀 Deploying applications..."
          
          # Deploy base infrastructure
          kubectl apply -f k8s/namespace.yaml
          kubectl apply -f k8s/secrets/banking-secrets.yaml
          kubectl apply -f k8s/database/postgres.yaml
          kubectl rollout status statefulset/postgres -n banking-app --timeout=300s
          
          # Build and push images
          docker buildx create --use
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-bank:latest --push frontend/
          docker buildx build --platform linux/amd64 -t ghcr.io/chingnokas/cg-backbank:latest --push backend/
          
          # Create registry secret
          kubectl create secret docker-registry registry-credentials \
            --docker-server=ghcr.io \
            --docker-username=${{ github.actor }} \
            --docker-password=${{ secrets.GITHUB_TOKEN }} \
            --namespace=banking-app \
            --dry-run=client -o yaml | kubectl apply -f -
          
          # Deploy applications
          kubectl apply -f k8s/backend/
          kubectl apply -f k8s/frontend/
          kubectl rollout status deployment/banking-backend -n banking-app --timeout=300s
          kubectl rollout status deployment/banking-frontend -n banking-app --timeout=300s
          
          echo "✅ Applications deployed"

      - name: Deploy Monitoring
        continue-on-error: true
        run: |
          echo "📊 Deploying monitoring..."
          kubectl apply -f k8s/monitoring/prometheus/
          kubectl apply -f k8s/monitoring/grafana/
          kubectl rollout status deployment/prometheus-server -n monitoring --timeout=300s
          kubectl rollout status deployment/grafana -n monitoring --timeout=300s
          echo "✅ Monitoring deployed"

      - name: Get Service URLs
        run: |
          echo "⏳ Getting service URLs..."
          sleep 60
          
          FRONTEND_IP=$(kubectl get svc banking-frontend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          BACKEND_IP=$(kubectl get svc banking-backend -n banking-app -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          GRAFANA_IP=$(kubectl get svc grafana -n monitoring -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || echo "pending")
          
          echo ""
          echo "🎉 BANKING APPLICATION DEPLOYED!"
          echo "================================"
          echo ""
          echo "🌐 Your Banking App:"
          echo "Frontend: http://$FRONTEND_IP/"
          echo "Backend:  http://$BACKEND_IP:8000/"
          echo ""
          echo "📊 Monitoring:"
          echo "Grafana: http://$GRAFANA_IP:3000/ (admin/BankingGrafana2024!)"
          echo ""
          echo "🎯 SUCCESS! Your banking application is live!"
          echo ""
          echo "💡 To manage cluster locally:"
          echo "doctl kubernetes cluster kubeconfig save banking-app-k8s"
